# -*- coding: utf-8 -*-
"""evaluate_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BtVoU_N5s8Qc2fZJQfk1hISxoP_J91fY
"""

import pandas as pd
import joblib
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import mean_squared_error, r2_score

def evaluate_model(model_path, X_test_path, y_test_path, output_dir=None):
    """
    Evaluate model performance

    Args:
        model_path (str): Path to trained model
        X_test_path (str): Path to test features
        y_test_path (str): Path to test target
        output_dir (str): Directory to save evaluation plots (optional)
    """
    # Load data and model
    model = joblib.load(model_path)
    X_test = pd.read_csv(X_test_path)
    y_test = pd.read_csv(y_test_path).values.ravel()

    # Make predictions
    y_pred = model.predict(X_test)

    # Calculate metrics
    mse = mean_squared_error(y_test, y_pred)
    rmse = mse ** 0.5
    r2 = r2_score(y_test, y_pred)

    print("Test set performance:")
    print(f"MSE: {mse:.4f}")
    print(f"RMSE: {rmse:.4f}")
    print(f"R-squared: {r2:.4f}")

    # Generate plots if output directory specified
    if output_dir:
        import os
        os.makedirs(output_dir, exist_ok=True)

        # Residual plot
        residuals = y_test - y_pred
        plt.figure(figsize=(8, 6))
        sns.scatterplot(x=y_pred, y=residuals)
        plt.axhline(y=0, color='r', linestyle='--')
        plt.title('Residual Plot')
        plt.xlabel('Predicted Values')
        plt.ylabel('Residuals')
        plt.savefig(f"{output_dir}/residuals.png")
        plt.close()

        # Actual vs Predicted plot
        plt.figure(figsize=(8, 6))
        sns.scatterplot(x=y_test, y=y_pred)
        plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')
        plt.title('Actual vs Predicted Values')
        plt.xlabel('Actual Prices')
        plt.ylabel('Predicted Prices')
        plt.savefig(f"{output_dir}/actual_vs_predicted.png")
        plt.close()

if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('--model', type=str, default='models/linear_regression.pkl',
                       help='Path to trained model')
    parser.add_argument('--X_test', type=str, default='data/processed/X_test.csv',
                       help='Path to test features CSV')
    parser.add_argument('--y_test', type=str, default='data/processed/y_test.csv',
                       help='Path to test target CSV')
    parser.add_argument('--output_dir', type=str, default='results',
                       help='Directory to save evaluation plots')
    args = parser.parse_args()

    evaluate_model(args.model, args.X_test, args.y_test, args.output_dir)